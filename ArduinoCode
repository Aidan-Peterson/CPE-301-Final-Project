//Aidan Peterson
//Final Project for CPE 301
//Final Version - 12/8/2023

#include <LiquidCrystal.h> // for LCD screen
//LiquidCrystal lcd(39, 41, 43, 45, 47, 49);
LiquidCrystal lcd(49, 47, 45, 43, 41, 39);

// for stepper motor
#include <Stepper.h> // Stepper motor library
const int stepsPerRevolution = 2038; // Defines the number of steps per rotation
Stepper myStepper = Stepper(stepsPerRevolution, 8, 10, 9, 11); // Pins entered in sequence IN1-IN3-IN2-IN4 for proper step sequence
int serial_stepper_control = 1; //to control vent control updates to the serial monitor

// for serial monitor
#define RDA 0x80
#define TBE 0x20  

volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;
 
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned int* my_ADC_DATA = (unsigned int*) 0x78;

// for temp/humidity sensor
#include <dht.h> //temp/humid sensor library
dht DHT;
#define DHT11_PIN 7//for use of temp/humid sensor

volatile int state_select = 2; //global variable used to change states within loop function

int set_temperature = 26.0; // global variable for desired temp

//for RTC module
#include "uRTCLib.h"
uRTCLib rtc(0x68);// uRTCLib rtc;
unsigned int first_number;
unsigned int second_number;

//for proper display of state change from disabled to idle
volatile int disabled_indicator = 0;

// Pins
// Define Port E Register Pointers
volatile unsigned char* port_e = (unsigned char*) 0x2E; 
volatile unsigned char* ddr_e  = (unsigned char*) 0x2D; 
volatile unsigned char* pin_e  = (unsigned char*) 0x2C;  
// Define Port K Register Pointers
volatile unsigned char* port_k = (unsigned char*) 0x108; 
volatile unsigned char* ddr_k  = (unsigned char*) 0x107; 
volatile unsigned char* pin_k  = (unsigned char*) 0x106; 
// Define Port F Register Pointers
volatile unsigned char* port_f = (unsigned char*) 0x31; 
volatile unsigned char* ddr_f  = (unsigned char*) 0x30; 
volatile unsigned char* pin_f  = (unsigned char*) 0x2F; 


void setup() 
{
  
  U0init(9600);// setup the UART

  //for RTC module
  #ifdef ARDUINO_ARCH_ESP8266
		URTCLIB_WIRE.begin(0, 2); // D3 and D4 on ESP8266
	#else
		URTCLIB_WIRE.begin();
	#endif

  //for state LEDs
  *ddr_e |= 0x8;//set pin 5 to output
  *ddr_k |= 0x4;//Set pin A10 to output
  *ddr_k |= 0x2;//Set pin A9 to output
  *ddr_k |= 0x1;//Set pin A8 to output

  //for dc motor
  *ddr_k |= 0x8;// set pin A11 to OUTPUT
  

  //for stepper motor CW
  *ddr_k &= 0xEF;//Set pin A12 as INPUT
  // for stepper motor CCW
  *ddr_k &= 0xDF;//Set pin A13 as INPUT


  //for water sensor
  adc_init();// setup the ADC
  *ddr_f |= 0x8;// configure A3 pin as an OUTPUT
  *port_f |= 0x8;// turn the sensor On

  // for reset button / error to idle
  *ddr_k &= 0xBF;//Set pin A14 as INPUT

  // for stop button / all states to disabled
  *ddr_k &= 0x7F;//Set pin A15 as INPUT

  // for start button / disabled to idle / interupt
  int interruptPin = 2;
  *ddr_e &= 0xFE; //set pin 2 to INPUT
  attachInterrupt(digitalPinToInterrupt(interruptPin), start_button_ISR, RISING);
  
}

void loop() 
{

  if (state_select == 1) //running state
    {
      *port_e |= 0x8;//blue LED on

      running();

      *port_e &= 0xF7;//blue LED off
    }

  if (state_select == 2) //idle state
    {
      if (disabled_indicator == 1)
        {
          U0putchar('I');
          U0putchar('d');
          U0putchar('l');
          U0putchar('e');
          display_time();
          disabled_indicator = 0;
        }

      *port_k |= 0x04;//green LED on

      idle();

      *port_k &= 0xFB;//green LED off
    }

  if (state_select == 3) //error state
    {
      *port_k |= 0x02;// red LED on

      error();

      *port_k &= 0xFD;//red LED off
    }

  if (state_select == 4) //disabled state
    {
      *port_k |= 0x01;//yellow LED on

      disabled();

      *port_k &= 0xFE;//yellow LED off
    }

}

void running()
{
  //turn on fan
  *port_k |= 0x08;//set pin A11 to HIGH

  check_temp();

  display_temp_hum();

  check_water_level();
  
  stepmotor_control();

  check_stop_button();

  //turn fan off
  *port_k &= 0xF7;//set pin A11 to LOW

}

void idle()
{
  
  check_temp();

  display_temp_hum();

  check_water_level();

  stepmotor_control();

  check_stop_button();

}

void error()
{
  //check for reset button
  int reset_button;
  if(*pin_k & 0x40)//reading if pin A14  is HIGH
  {
    reset_button = HIGH;
  }
  else
  {
    reset_button = LOW;
  }
  unsigned int value = adc_read(0); // reading water level

  if ((reset_button == HIGH) && (value >= 100))
    {
      state_select = 2;
      U0putchar('I');
      U0putchar('d');
      U0putchar('l');
      U0putchar('e');
      display_time();
    }

  check_stop_button();
}

void disabled()
{

}

void stepmotor_control()
{
  //Stepper motor controls
  int val;
  if(*pin_k & 0x10)//reading the value of pin A12
  {
    val = HIGH;
  }
  else
  {
    val = LOW;
  }
  if (val == HIGH)
  {
    myStepper.setSpeed(10);// setting speed of stepper motor when button is pressed
    myStepper.step(10); 
  }

  int val2;
  if(*pin_k & 0x20)//reading the value of pin A13
  {
    val2 = HIGH;
  }
  else
  {
    val2 = LOW;
  }
  if (val2 == HIGH)
  {
    myStepper.setSpeed(10);// setting speed of stepper motor when button is pressed
    myStepper.step(-10); 
  }

  if(serial_stepper_control == 1 && ((val == HIGH) || (val2 == HIGH)))
  {
    U0putchar('V');
    U0putchar('e');
    U0putchar('n');
    U0putchar('t');
    U0putchar(':');
    if (val2 == HIGH){U0putchar('C');}
    U0putchar('C');
    U0putchar('W');
    U0putchar('\n');
    serial_stepper_control = 0;
  }

  if ((val == LOW) && (val2 == LOW))
  {
    serial_stepper_control = 1;
  }


  //reset readings of pin values
  val = LOW;
  val2 = LOW;
}

void check_temp()
{
  //checking temp
  int chk = DHT.read11(DHT11_PIN);


  if ((DHT.temperature > set_temperature) && (state_select != 1)) //check for temp and transition to running if over limit
    {
      state_select = 1;
      U0putchar('R');
      U0putchar('u');
      U0putchar('n');
      U0putchar('n');
      U0putchar('i');
      U0putchar('n');
      U0putchar('g');
      display_time();
    }

  if ((DHT.temperature < (set_temperature + 1)) && (state_select != 2)) //check for temp and transition to idle if under limit
    {
      state_select = 2;
      U0putchar('I');
      U0putchar('d');
      U0putchar('l');
      U0putchar('e');
      display_time();
    } 
}

void check_water_level()
{
  //checking water level
  unsigned int value = adc_read(0);

  if (value < 100) //check water level and transition to error if under limit
    {
      lcd.clear();
      lcd.print("Water too low"); 
      state_select = 3;
      U0putchar('E');
      U0putchar('r');
      U0putchar('r');
      U0putchar('o');
      U0putchar('r');
      display_time();
    }
}

void check_stop_button()
{
  //check for stop button
  int stop_button;
  if(*pin_k & 0x80)//reading if pin A15 is HIGH
  {
    stop_button = HIGH;
  }
  else
  {
    stop_button = LOW;
  }
  if (stop_button == HIGH)
    {
      lcd.clear();
      state_select = 4;
      U0putchar('D');
      U0putchar('i');
      U0putchar('s');
      U0putchar('a');
      U0putchar('b');
      U0putchar('l');
      U0putchar('e');
      U0putchar('d');
      display_time();
    }
}

void start_button_ISR()
{
  if (state_select == 4)
  {
    state_select = 2;
    disabled_indicator = 1;
  }
}

void display_temp_hum()
{
  int chk = DHT.read11(DHT11_PIN);//read temp and humidity

  lcd.clear();

  lcd.print("T=");
  lcd.print(DHT.temperature);//display temp

  lcd.print("  ");
  
  lcd.print("H=");
  lcd.print(DHT.humidity);//display humidity
}

void adc_init() //for water sensor
{
  // setup the A register
  *my_ADCSRA |= 0b10000000; // set bit   7 to 1 to enable the ADC
  *my_ADCSRA &= 0b11011111; // clear bit 6 to 0 to disable the ADC trigger mode
  *my_ADCSRA &= 0b11110111; // clear bit 5 to 0 to disable the ADC interrupt
  *my_ADCSRA &= 0b11111000; // clear bit 0-2 to 0 to set prescaler selection to slow reading
  // setup the B register
  *my_ADCSRB &= 0b11110111; // clear bit 3 to 0 to reset the channel and gain bits
  *my_ADCSRB &= 0b11111000; // clear bit 2-0 to 0 to set free running mode
  // setup the MUX Register
  *my_ADMUX  &= 0b01111111; // clear bit 7 to 0 for AVCC analog reference
  *my_ADMUX  |= 0b01000000; // set bit   6 to 1 for AVCC analog reference
  *my_ADMUX  &= 0b11011111; // clear bit 5 to 0 for right adjust result
  *my_ADMUX  &= 0b11100000; // clear bit 4-0 to 0 to reset the channel and gain bits
}

unsigned int adc_read(unsigned char adc_channel_num) //for water sensor
{
  // clear the channel selection bits (MUX 4:0)
  *my_ADMUX  &= 0b11100000;
  // clear the channel selection bits (MUX 5)
  *my_ADCSRB &= 0b11110111;
  // set the channel number
  if(adc_channel_num > 7)
  {
    // set the channel selection bits, but remove the most significant bit (bit 3)
    adc_channel_num -= 8;
    // set MUX bit 5
    *my_ADCSRB |= 0b00001000;
  }
  // set the channel selection bits
  *my_ADMUX  += adc_channel_num;
  // set bit 6 of ADCSRA to 1 to start a conversion
  *my_ADCSRA |= 0x40;
  // wait for the conversion to complete
  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register
  return *my_ADC_DATA;
}

void display_time()
{
  U0putchar(' ');
  U0putchar('D');
  U0putchar('a');
  U0putchar('t');
  U0putchar('e');
  U0putchar('T');
  U0putchar('i');
  U0putchar('m');
  U0putchar('e');
  U0putchar(':');
  U0putchar(' ');
	my_serial_print(rtc.month());
	U0putchar('/');
	my_serial_print(rtc.day());
	U0putchar('/');
	my_serial_print(rtc.year());

	U0putchar(' ');

	my_serial_print(rtc.hour());
	U0putchar(':');
	my_serial_print(rtc.minute());
	U0putchar(':');
	my_serial_print(rtc.second());

  U0putchar('\n');
}

void my_serial_print(unsigned int t)
{
  rtc.refresh();
  if (t < 10) // for t 0 - 9
  {
    U0putchar(t + '0');
  }
  if ((t > 9) && (t < 100))//for t 10 - 99
  {
    first_number = t/10 + '0';
    second_number = t%10 + '0';
    U0putchar(first_number);
    U0putchar(second_number);
  }

}

void U0init(int U0baud)
{
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}
unsigned char U0kbhit()
{
  return *myUCSR0A & RDA;
}
unsigned char U0getchar()
{
  return *myUDR0;
}
void U0putchar(unsigned char U0pdata)
{
  while((*myUCSR0A & TBE)==0);
  *myUDR0 = U0pdata;
}
